#include <bits/stdc++.h>
#define FAST ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define FOR(ww, aa, nn) for(int ww=(aa);ww<(nn);++ww)
#define ALL(aa) (aa).begin(),(aa).end()
#define CASES(tt) int aa; cin >> aa; for(int tt=1;tt<=aa;tt++)
#define MOD 1000000007
#define INF 987654321
typedef long long ll;
using namespace std;

int n, m;
int Map[51][51];
int dx[4] = { -1,0,1,0 };
int dy[4] = { 0,1,0,-1 };

int dfs(int x, int y, int d)
{
	/*cout << "-------------------------";
	cout << x << " " << y << " " << d << "\n";
	FOR(i, 0, n)
	{
		FOR(j, 0, m)
		{
			if (i == x && j == y)
				cout << "* ";
			else
				cout << Map[i][j] << " ";
		}
		cout << "\n";
	}*/
	bool flag = 1;
	for (int i = 0; i < 4; i++)
	{
		int nx = x + dx[i];
		int ny = y + dy[i];
		if (nx >= 0 && nx < n && ny >= 0 && ny < m && !Map[nx][ny])
		{
			flag = 0;
			break;
		}
	}
	if (flag)
	{
		int nd = (d + 2) % 4;
		if (Map[x + dx[nd]][y + dy[nd]] == 1) return 0;
		else return dfs(x + dx[nd], y + dy[nd], d);
	}

	int nd = (d + 3) % 4;
	int nx = x + dx[nd], ny = y + dy[nd];
	if (nx >= 0 && nx < n && ny >= 0 && ny < m && !Map[nx][ny])
	{
		Map[nx][ny] = 2;
		return dfs(nx, ny, nd) + 1;
	}
	else
	{
		return dfs(x, y, nd);
	}
}

int main()
{
	FAST;
	int x, y, d;
	cin >> n >> m;
	cin >> x >> y >> d;
	FOR(i, 0, n) FOR(j, 0, m) cin >> Map[i][j];
	Map[x][y] = 2;
	cout << dfs(x, y, d) + 1;
}